import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  TextField,
  MenuItem,
  Button,
  Grid,
  Typography,
  Card,
  CardContent,
} from "@mui/material";

const AddSlotsToWorkSchedule = () => {
  const [employees, setEmployees] = useState([]);
  const [selectedEmployeeWorkSchedule, setSelectedEmployeeWorkSchedule] =
    useState("");
  const [selectedDate, setSelectedDate] = useState("");
  console.log("üöÄ ~ AddSlotsToWorkSchedule ~ selectedDate:", selectedDate);
  const [startTime, setStartTime] = useState("");
  console.log("üöÄ ~ AddSlotsToWorkSchedule ~ startTime:", startTime);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Fetch danh s√°ch th·ª£ c·∫Øt t√≥c
  useEffect(() => {
    const fetchEmployees = async () => {
      try {
        const response = await axios.get(
          "http://localhost:9999/employees/workScheduleId"
        );
        const barbers = response.data.data.filter(
          (emp) => emp.position === "barber"
        );
        setEmployees(barbers);
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    };

    fetchEmployees();
  }, []);

  // X·ª≠ l√Ω khi submit form
  const handleSubmit = async (event) => {
    event.preventDefault();

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!selectedEmployeeWorkSchedule || !selectedDate || !startTime) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    setLoading(true);
    setError("");

    try {
      // Chuy·ªÉn ƒë·ªïi selectedDate th√†nh th·ª© trong tu·∫ßn
      const day = new Date(selectedDate).toISOString().split("T")[0];
      console.log(
        "üõ†Ô∏è Selected Employee Work Schedule ID:",
        selectedEmployeeWorkSchedule
      );

      console.log("üõ†Ô∏è day:", day);

      console.log("üõ†Ô∏è startTime:", startTime);

      // G·ª≠i d·ªØ li·ªáu l√™n server
      await axios.post(
        `http://localhost:9999/workschedule/${selectedEmployeeWorkSchedule}/slots`,
        { day, startTime }
      );

      alert("Th√™m slot th√†nh c√¥ng");
      // Reset form sau khi th√™m th√†nh c√¥ng
      setSelectedEmployee("");
      setSelectedDate("");
      setStartTime("");
    } catch (error) {
      console.error("L·ªói khi th√™m slot:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          Th√™m Slot L√†m Vi·ªác
        </Typography>
        {error && (
          <Typography color="error" gutterBottom>
            {error}
          </Typography>
        )}
        <form onSubmit={handleSubmit}>
          <Grid container spacing={2}>
            {/* Ch·ªçn th·ª£ c·∫Øt t√≥c */}
            <Grid item xs={12}>
              <TextField
                select
                label="Ch·ªçn Th·ª£ C·∫Øt T√≥c"
                fullWidth
                value={selectedEmployeeWorkSchedule}
                onChange={(e) =>
                  setSelectedEmployeeWorkSchedule(e.target.value)
                }
                required
              >
                {employees.map((emp) => (
                  <MenuItem key={emp._id} value={emp.workScheduleId}>
                    {emp.fullName}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>

            {/* Ch·ªçn ng√†y l√†m vi·ªác */}
            <Grid item xs={6}>
              <TextField
                label="Ch·ªçn Ng√†y L√†m Vi·ªác"
                type="date"
                fullWidth
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                InputLabelProps={{ shrink: true }}
                inputProps={{
                  min: new Date().toISOString().split("T")[0], // Ch·ªâ cho ph√©p ch·ªçn ng√†y t·ª´ h√¥m nay tr·ªü ƒëi
                }}
                required
              />
            </Grid>

            {/* Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu */}
            <Grid item xs={6}>
              <TextField
                label="Gi·ªù B·∫Øt ƒê·∫ßu"
                type="time"
                fullWidth
                value={startTime}
                onChange={(e) => setStartTime(e.target.value)}
                InputLabelProps={{ shrink: true }}
                required
              />
            </Grid>

            {/* N√∫t submit */}
            <Grid item xs={12}>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={loading}
              >
                {loading ? "ƒêang x·ª≠ l√Ω..." : "Th√™m Slot"}
              </Button>
            </Grid>
          </Grid>
        </form>
      </CardContent>
    </Card>
  );
};

export default AddSlotsToWorkSchedule;
